name: AI Pipeline - Microservices CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # Test and build shared package
  shared:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build shared package
        run: npm run build:shared
      
      - name: Upload shared build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shared-dist
          path: packages/shared/dist

  # Test and build microservices
  microservices:
    needs: shared
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Download shared artifacts
        uses: actions/download-artifact@v4
        with:
          name: shared-dist
          path: packages/shared/dist
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check -w services/${{ matrix.service }}
      
      - name: Build service
        run: npm run build -w services/${{ matrix.service }}
      
      - name: Run tests
        run: npm run test -w services/${{ matrix.service }} || echo "No tests configured"

  # Build and push Docker images
  docker:
    needs: [shared, microservices]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [api-gateway, auth-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Frontend build (existing monolith for now)
  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check frontend
        run: npm run type-check --workspace=frontend
      
      - name: Run frontend tests
        run: npm run test:run --workspace=frontend
      
      - name: Build frontend
        run: npm run build:frontend

  # Integration tests
  integration:
    needs: [microservices, frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build all services
        run: npm run build:services
      
      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # npm run test:integration
        env:
          MONGODB_URI: mongodb://admin:password@localhost:27017/ai-pipeline-test?authSource=admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379