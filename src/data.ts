// Data and configuration for the AI Pipeline IDE
import { FileMap, PipelineStage, PipelineStatus, PipelineConfig } from './types';

// Initial file data for the IDE
export const initialFiles: FileMap = {
  'project-requirements.md': `# Project Requirements

Please describe your project requirements here.

## Project Type
- [ ] Frontend Only
- [ ] Backend Only  
- [ ] Full Stack

## Features
- Feature 1
- Feature 2
- Feature 3

## Technical Requirements
- Performance requirements
- Security considerations
- Scalability needs

## Additional Notes
Any additional notes or specific requirements.
`,
  'README.md': `# AI Generated Project

This project was generated using the AI Pipeline IDE.

## Getting Started

Instructions will be added here after project generation.

## Architecture

Architecture details will be provided by the AI Architect.

## Development

Development guidelines will be added here.
`
};

// Pipeline stages enum usage
export const PIPELINE_STAGES = PipelineStage;

// Pipeline status enum usage  
export const PIPELINE_STATUS = PipelineStatus;

// Gemini API configuration
export const GEMINI_CONFIG = {
  API_URL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
  DEFAULT_MODEL: 'gemini-pro'
} as const;

// File icon mapping with type safety
export const getFileIcon = (filename: string): string => {
  const extension = filename.split('.').pop()?.toLowerCase();
  
  switch (extension) {
    case 'py':
      return 'fas fa-file-code text-blue-500';
    case 'yaml':
    case 'yml':
      return 'fas fa-file-alt text-yellow-500';
    case 'txt':
      return 'fas fa-file-text text-gray-500';
    case 'md':
      return 'fas fa-file-alt text-green-500';
    case 'js':
    case 'jsx':
      return 'fas fa-file-code text-yellow-600';
    case 'ts':
    case 'tsx':
      return 'fas fa-file-code text-blue-600';
    case 'json':
      return 'fas fa-file-code text-green-600';
    case 'html':
      return 'fas fa-file-code text-orange-500';
    case 'css':
      return 'fas fa-file-code text-purple-500';
    case 'vue':
      return 'fas fa-file-code text-green-500';
    case 'php':
      return 'fas fa-file-code text-indigo-500';
    case 'java':
      return 'fas fa-file-code text-red-500';
    case 'sql':
      return 'fas fa-file-alt text-cyan-500';
    default:
      return 'fas fa-file text-gray-400';
  }
};

// Default project configurations
export const getDefaultProjectConfig = (projectType: 'frontend' | 'backend' | 'fullstack'): PipelineConfig => {
  const baseConfig = {
    projectName: 'AI Generated Project',
    description: 'Project generated by AI Pipeline IDE',
    requirements: 'Basic project requirements',
    features: ['Core functionality', 'User interface', 'Error handling'],
  };

  switch (projectType) {
    case 'frontend':
      return {
        ...baseConfig,
        projectType: 'frontend',
        techStack: {
          frontend: ['React', 'TypeScript', 'Tailwind CSS'],
        },
        designSystem: {
          colorScheme: 'Modern dark theme',
          components: ['Header', 'Sidebar', 'Main content', 'Footer'],
        },
      };
    
    case 'backend':
      return {
        ...baseConfig,
        projectType: 'backend',
        techStack: {
          backend: ['Node.js', 'Express', 'TypeScript'],
          database: 'MongoDB',
        },
        architecture: {
          type: 'REST API',
          patterns: ['MVC', 'Repository Pattern'],
        },
      };
    
    case 'fullstack':
      return {
        ...baseConfig,
        projectType: 'fullstack',
        techStack: {
          frontend: ['React', 'TypeScript', 'Tailwind CSS'],
          backend: ['Node.js', 'Express', 'TypeScript'],
          database: 'MongoDB',
        },
        designSystem: {
          colorScheme: 'Modern dark theme',
          components: ['Header', 'Sidebar', 'Main content', 'Footer'],
        },
        architecture: {
          type: 'Full-stack web application',
          patterns: ['MVC', 'Repository Pattern', 'Component-based frontend'],
        },
      };
    
    default:
      return baseConfig as PipelineConfig;
  }
};