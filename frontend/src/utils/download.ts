// Utility functions for downloading project files as ZIP
import { FileMap } from '../types';

// Simple ZIP creation utility (browser-compatible)
export class SimpleZip {
  private files: Array<{ name: string; content: string }> = [];

  addFile(name: string, content: string) {
    this.files.push({ name, content });
  }

  generateBlob(): Blob {
    // For a real implementation, you'd use a proper ZIP library like JSZip
    // This is a simplified version that creates a text-based archive
    const archive = this.files.map(file => {
      const separator = '\n' + '='.repeat(50) + '\n';
      return `FILE: ${file.name}${separator}${file.content}${separator}`;
    }).join('\n');

    return new Blob([archive], { type: 'text/plain' });
  }
}

export const downloadProjectAsZip = (files: FileMap, projectName: string) => {
  try {
    // Create a simple archive
    const zip = new SimpleZip();
    
    // Add all files to the archive
    Object.entries(files).forEach(([filename, content]) => {
      zip.addFile(filename, content);
    });

    // Add a package.json if it doesn't exist
    if (!files['package.json']) {
      const packageJson = {
        name: projectName.toLowerCase().replace(/\s+/g, '-'),
        version: '1.0.0',
        description: `Generated project: ${projectName}`,
        main: 'index.js',
        scripts: {
          start: 'node index.js',
          dev: 'npm run start'
        },
        keywords: ['ai-generated', 'project'],
        author: 'AI Pipeline IDE',
        license: 'MIT'
      };
      zip.addFile('package.json', JSON.stringify(packageJson, null, 2));
    }

    // Add a .gitignore if it doesn't exist
    if (!files['.gitignore']) {
      const gitignore = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
dist/
build/
*.tsbuildinfo

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Logs
logs
*.log
`;
      zip.addFile('.gitignore', gitignore);
    }

    // Add README with setup instructions if it doesn't exist or is basic
    if (!files['README.md'] || files['README.md'].includes('AI Generated Project')) {
      const readme = `# ${projectName}

## Description
This project was generated using the AI Pipeline IDE.

## Setup Instructions

1. **Install Dependencies**
   \`\`\`bash
   npm install
   \`\`\`

2. **Development**
   \`\`\`bash
   npm run dev
   \`\`\`

3. **Production**
   \`\`\`bash
   npm run build
   npm start
   \`\`\`

## Project Structure

${Object.keys(files).map(name => `- \`${name}\` - ${getFileDescription(name)}`).join('\n')}

## Technologies Used

- Generated with AI Pipeline IDE
- Modern web development stack
- Best practices implementation

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## License

MIT License - see LICENSE file for details.

---

*Generated by AI Pipeline IDE*
`;
      zip.addFile('README.md', readme);
    }

    // Generate and download the archive
    const blob = zip.generateBlob();
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `${projectName.replace(/\s+/g, '_')}_project.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Clean up
    URL.revokeObjectURL(url);
    
    return true;
  } catch (error) {
    console.error('Error downloading project:', error);
    return false;
  }
};

const getFileDescription = (filename: string): string => {
  const ext = filename.split('.').pop()?.toLowerCase();
  
  switch (ext) {
    case 'js':
    case 'jsx':
      return 'JavaScript source file';
    case 'ts':
    case 'tsx':
      return 'TypeScript source file';
    case 'html':
      return 'HTML markup file';
    case 'css':
      return 'CSS stylesheet';
    case 'json':
      return 'Configuration file';
    case 'md':
      return 'Documentation file';
    case 'py':
      return 'Python source file';
    case 'yaml':
    case 'yml':
      return 'YAML configuration file';
    default:
      return 'Project file';
  }
};

// Enhanced download with better ZIP support
export const downloadProjectAsRealZip = async (files: FileMap, projectName: string) => {
  try {
    // This would require adding JSZip as a dependency
    // For now, we'll use the simple text-based approach
    return downloadProjectAsZip(files, projectName);
  } catch (error) {
    console.error('Error creating ZIP file:', error);
    return false;
  }
};

export default { downloadProjectAsZip, downloadProjectAsRealZip };